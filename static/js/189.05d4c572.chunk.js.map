{"version":3,"file":"static/js/189.05d4c572.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.styled.js","components/AuthForm/AuthForm.jsx","utils/schemas/registrationSchema.js","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: white;\n  border: 1px solid rgba(84, 173, 255, 1);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: rgba(136, 136, 136, 1);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: rgba(84, 173, 255, 1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: rgba(136, 136, 136, 1);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: rgba(84, 173, 255, 1);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* width: 24px;\n  height: 24px; */\n  right: 12px;\n  top: 12px;\n  color: ${({ passwordValue,  }) =>\n    passwordValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ passwordValue }) =>\n    passwordValue ? 'translateX(-27px)' : 'none'};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ error, valid }) =>\n      error\n        ? 'var(--error-color)'\n        : valid\n        ? 'var(--success-color)'\n        : 'var(--btn-bg-color)'};\n  cursor: pointer;\n  transition: 250ms;\n  opacity: ${({ passwordValue }) => (passwordValue ? 1 : 0)};\n`;\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: rgba(136, 136, 136, 1);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid\n    ${({ error, valid }) =>\n      error\n        ? 'var(--error-color)'\n        : valid\n        ? 'var(--success-color)'\n        : 'var(--btn-bg-color)'};\n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: rgba(84, 173, 255, 1);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n  font-weight: 400;\n  margin-top: 4px;\n  margin-left: 16px;\n`;\n\n\n\n\n\n\n\n\n\nexport const IconName = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: -23px;\n  /* top: 5px; */\n  color: ${({ nameValue }) =>\n    nameValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ nameValue }) =>\n    nameValue ? 'translateX(-27px)' : 'none'};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const IconEmail = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: -23px;\n\n  /* top: 12px; */\n  color: ${({ emailValue }) =>\n    emailValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ emailValue }) =>\n    emailValue ? 'translateX(-27px)' : 'none'};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\n// export const IconValidName = styled.span`\n//   position: absolute;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   right: 17px;\n//   top: 15px;\n//   color: ${({ error, valid }) =>\n//     error ? 'var(--error-color)' : valid ? 'var(--success-color)' : 'var(--btn-bg-color)'};\n//   cursor: pointer;\n//   transition: 250ms;\n//   opacity: ${({ nameValue }) => (nameValue ? 1 : 0)};\n// `;\n\n// export const IconValidEmail = styled.span`\n//   position: absolute;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   right: 17px;\n//   top: 15px;\n//   color: ${({ error, valid }) =>\n//     error ? 'var(--error-color)' : valid ? 'var(--success-color)' : 'var(--btn-bg-color)'};\n//   cursor: pointer;\n//   transition: 250ms;\n//   opacity: ${({ emailValue }) => (emailValue ? 1 : 0)};\n// `;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { useState } from 'react';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  IconName,\n  IconEmail,\n  Btn,\n  Error,\n} from './AuthForm.styled';\n\nconst AuthForm = ({ values, errors, touched }) => {\n  const formik = useFormikContext();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const validPassword = formik.touched.password && !formik.errors.password;\n  const validConfirmPassword =\n    formik.touched.confirmPassword && !formik.errors.confirmPassword;\n\n  const validateIcon = (touched, errors, values, fieldName) => {\n    const valid = touched[fieldName] && !errors[fieldName];\n\n    if (touched[fieldName] && errors[fieldName]) {\n      return (\n        <IconValid valid={false} passwordValue={password.length}>\n          <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n        </IconValid>\n      );\n    } else if (valid) {\n      return (\n        <IconValid valid passwordValue={password.length}>\n          <MdOutlineDone />\n        </IconValid>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(prevShowConfirmPassword => !prevShowConfirmPassword);\n  };\n\n  const onNameChange = e => {\n    const nameValue = e.target.value;\n    setName(nameValue);\n    formik.setFieldValue('name', nameValue);\n  };\n\n  const onEmailChange = e => {\n    const emailValue = e.target.value;\n    setEmail(emailValue);\n    formik.setFieldValue('email', emailValue);\n  };\n\n  const onPasswordChange = e => {\n    const passwordValue = e.target.value;\n    setPassword(passwordValue);\n    formik.setFieldValue('password', passwordValue);\n  };\n\n  const onConfirmPasswordChange = e => {\n    const confirmPasswordValue = e.target.value;\n    setConfirmPassword(confirmPasswordValue);\n    formik.setFieldValue('confirmPassword', confirmPasswordValue);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Registration</h1>\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"name\"\n              placeholder=\"Name\"\n              variant=\"outlined\"\n              name=\"name\"\n              type=\"name\"\n              autoComplete=\"off\"\n              required\n              onChange={onNameChange}\n              value={name}\n              error={formik.touched.name && formik.errors.name}\n              valid={formik.touched.name && !formik.errors.name}\n            />\n            <IconName nameValue={name.length}>\n              {formik.touched.name && formik.errors.name ? (\n                <IconValid valid={false} passwordValue={name.length}>\n                  <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n                </IconValid>\n              ) : (\n                <IconValid valid passwordValue={name.length}>\n                  <MdOutlineDone />\n                </IconValid>\n              )}\n            </IconName>\n            <Error name=\"name\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              onChange={onEmailChange}\n              value={email}\n              error={formik.touched.email && formik.errors.email}\n              valid={formik.touched.email && !formik.errors.email}\n            />\n            <IconEmail emailValue={email.length}>\n              {formik.touched.email && formik.errors.email ? (\n                <IconValid valid={false} passwordValue={email.length}>\n                  <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n                </IconValid>\n              ) : (\n                <IconValid valid passwordValue={email.length}>\n                  <MdOutlineDone />\n                </IconValid>\n              )}\n            </IconEmail>\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              onChange={onPasswordChange}\n              value={password}\n              error={formik.touched.password && formik.errors.password}\n              valid={validPassword}\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{\n                width: '24px',\n                height: '24px',\n              }}\n              passwordValue={password}\n              error={formik.touched.password && formik.errors.password}\n              valid={validPassword}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'password'\n            )}\n            <Error name=\"password\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"confirmPassword\"\n              placeholder=\"Confirm password\"\n              variant=\"outlined\"\n              name=\"confirmPassword\"\n              autoComplete=\"off\"\n              type={showConfirmPassword ? 'text' : 'password'}\n              required\n              onChange={onConfirmPasswordChange}\n              value={confirmPassword}\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n              valid={validConfirmPassword}\n            />\n            <Icon\n              onClick={toggleConfirmPasswordVisibility}\n              style={{\n                width: '24px',\n                height: '24px',\n              }}\n              passwordValue={confirmPassword}\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n              valid={validConfirmPassword}\n            >\n              {showConfirmPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'confirmPassword'\n            )}\n            <Error name=\"confirmPassword\" component=\"span\" />\n          </InputContainer>\n\n          <Btn type=\"submit\" color=\"primary\">\n            Registration\n          </Btn>\n        </StyledForm>\n        <p>\n          Already have an account? <a href=\"/YourPet/login\">Login</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import * as Yup from 'yup';\n\nconst validationRegistrationSchema = Yup.object({\n  name: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n        message:\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\",\n      })\n      .required('Required'),\n    email: Yup.string().email('Enter a valid Email').required('Please, enter your email'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .required('Required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\n      .required('Required'),\n});\n  \nexport default validationRegistrationSchema;","import AuthForm from 'components/AuthForm/AuthForm';\nimport { Formik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router';\nimport validationRegistrationSchema from 'utils/schemas/registrationSchema';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { name, email, password } = values;\n      await dispatch(register({ name, email, password }));\n      // navigate('/user');\n      resetForm();\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={validationRegistrationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleSubmit }) => (\n        <AuthForm\n          values={values}\n          errors={errors}\n          touched={touched}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default Register;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","_ref","passwordValue","_ref2","IconValid","_templateObject4","_ref3","error","valid","_ref4","InputLine","Field","_templateObject5","_ref5","StyledForm","Form","_templateObject6","Btn","_templateObject7","Error","ErrorMessage","_templateObject8","IconName","_templateObject9","_ref6","nameValue","_ref7","IconEmail","_templateObject10","_ref8","emailValue","_ref9","values","errors","touched","formik","useFormikContext","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showConfirmPassword","setShowConfirmPassword","_useState5","_useState6","name","setName","_useState7","_useState8","email","setEmail","_useState9","_useState10","password","setPassword","_useState11","_useState12","confirmPassword","setConfirmPassword","validPassword","validConfirmPassword","validateIcon","fieldName","_jsx","length","children","RxCross2","style","color","MdOutlineDone","_Fragment","_jsxs","id","placeholder","variant","type","autoComplete","required","onChange","e","target","value","setFieldValue","component","onClick","prevShowPassword","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","confirmPasswordValue","prevShowConfirmPassword","href","Yup","min","max","matches","message","oneOf","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","register","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationRegistrationSchema","onSubmit","AuthForm"],"sourceRoot":""}