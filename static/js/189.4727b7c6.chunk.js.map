{"version":3,"file":"static/js/189.4727b7c6.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.styled.js","components/AuthForm/AuthForm.jsx","utils/schemas/registrationSchema.js","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: white;\n  border: 1px solid rgba(84, 173, 255, 1);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: rgba(136, 136, 136, 1);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: rgba(84, 173, 255, 1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: rgba(136, 136, 136, 1);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: rgba(84, 173, 255, 1);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* width: 24px;\n  height: 24px; */\n  right: 12px;\n  top: 12px;\n  color: ${({ error, valid }) =>\n  error ? 'rgba(255, 99, 71, 1)' : valid? 'rgba(42, 187, 155, 1)' : 'rgba(84, 173, 255, 1)'};\n  cursor: pointer;\n  transition: 250ms;\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ error, valid }) =>\n  error ? 'rgba(255, 99, 71, 1)' : valid? 'rgba(42, 187, 155, 1)' : 'rgba(84, 173, 255, 1)'};\n  cursor: pointer;\n  transition: 250ms;\n\n`;\n\nexport const IconError = styled.span`\nposition: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ error, valid }) =>\n  error ? 'rgba(255, 99, 71, 1)' : valid? 'rgba(42, 187, 155, 1)' : 'rgba(84, 173, 255, 1)'};\n  cursor: pointer;\n  transition: 250ms;`\n\n\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: rgba(136, 136, 136, 1);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid ${({ error, valid }) =>\n  error ? 'rgba(255, 99, 71, 1)' : valid? 'rgba(42, 187, 155, 1)' : 'rgba(84, 173, 255, 1)'};\n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n\n  \n`;\n\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: rgba(84, 173, 255, 1);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\n\nexport const Error = styled(ErrorMessage)`\ncolor: red;\nfont-size: 12px;\nfont-weight: 400;\nmargin-top: 4px;\nmargin-left: 16px;\n\n`\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { useState } from 'react';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  Btn,\n  Error,\n} from './AuthForm.styled';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nconst AuthForm = ({ values, errors, touched }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const formik = useFormikContext();\n  const valid = formik.touched.password && !formik.errors.password;\n  const validConfirm =\n    formik.touched.confirmPassword && !formik.errors.confirmPassword;\n\n  const validateIcon = (touched, errors, values, fieldName) => {\n    const valid = touched[fieldName] && !errors[fieldName];\n\n    if (touched[fieldName] && errors[fieldName]) {\n      return (\n        <IconValid valid={false}>\n          <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n        </IconValid>\n      );\n    } else if (valid) {\n      return (\n        <IconValid valid>\n          <MdOutlineDone />\n        </IconValid>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(prevShowConfirmPassword => !prevShowConfirmPassword);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Registration</h1>\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"name\"\n              placeholder=\"Name\"\n              variant=\"outlined\"\n              name=\"name\"\n              type=\"name\"\n              autoComplete=\"off\"\n              required\n              error={formik.touched.name && formik.errors.name}\n              valid={formik.touched.name && !formik.errors.name}\n            />\n            {validateIcon(formik.touched, formik.errors, formik.values, 'name')}\n            <Error name=\"name\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              error={formik.touched.email && formik.errors.email}\n              valid={formik.touched.email && !formik.errors.email}\n            />\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'email'\n            )}\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              error={formik.touched.password && formik.errors.password}\n              valid={formik.touched.password && !formik.errors.password}\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{ width: '24px', height: '24px' }}\n              error={formik.touched.password && formik.errors.password}\n              valid={valid}\n            >\n              {valid ? (\n                <MdOutlineDone />\n              ) : showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            <Error name=\"password\" component=\"span\" />\n          </InputContainer>\n          <InputContainer>\n            <InputLine\n              id=\"confirmPassword\"\n              placeholder=\"Confirm password\"\n              variant=\"outlined\"\n              name=\"confirmPassword\"\n              autoComplete=\"off\"\n              type={showConfirmPassword ? 'text' : 'password'}\n              required\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n              valid={\n                formik.touched.confirmPassword && !formik.errors.confirmPassword\n              }\n            />\n            <Icon\n              onClick={toggleConfirmPasswordVisibility}\n              style={{ width: '24px', height: '24px' }}\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n              valid={valid}\n            >\n              {validConfirm ? (\n                <MdOutlineDone />\n              ) : showConfirmPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            <Error name=\"confirmPassword\" component=\"span\" />\n          </InputContainer>\n\n          <Btn type=\"submit\" color=\"primary\">\n            Registration\n          </Btn>\n        </StyledForm>\n        <p>\n          Already have an account? <a href=\"/YourPet/login\">Login</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import * as Yup from 'yup';\n\nconst validationRegistrationSchema = Yup.object({\n  name: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n        message:\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\",\n      })\n      .required('Required'),\n    email: Yup.string().email('Enter a valid Email').required('Please, enter your email'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .required('Required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\n      .required('Required'),\n});\n  \nexport default validationRegistrationSchema;","import AuthForm from 'components/AuthForm/AuthForm';\nimport { Formik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router';\nimport validationRegistrationSchema from 'utils/schemas/registrationSchema';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { name, email, password } = values;\n      await dispatch(register({ name, email, password }));\n      // navigate('/user');\n      resetForm();\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={validationRegistrationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleSubmit }) => (\n        <AuthForm\n          values={values}\n          errors={errors}\n          touched={touched}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default Register;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","_ref","error","valid","IconValid","_templateObject4","_ref2","InputLine","_templateObject5","_ref3","Field","_templateObject6","_ref4","StyledForm","Form","_templateObject7","Btn","_templateObject8","Error","ErrorMessage","_templateObject9","values","errors","touched","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showConfirmPassword","setShowConfirmPassword","formik","useFormikContext","password","validConfirm","confirmPassword","validateIcon","fieldName","_jsx","children","RxCross2","style","color","MdOutlineDone","_Fragment","_jsxs","id","placeholder","variant","name","type","autoComplete","required","component","email","onClick","prevShowPassword","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","prevShowConfirmPassword","href","Yup","min","max","matches","message","oneOf","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","register","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationRegistrationSchema","onSubmit","AuthForm"],"sourceRoot":""}