{"version":3,"file":"static/js/189.51a6ca3f.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.styled.js","components/AuthForm/AuthForm.jsx","utils/schemas/registrationSchema.js","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: white;\n  border: 1px solid rgba(84, 173, 255, 1);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: rgba(136, 136, 136, 1);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: rgba(84, 173, 255, 1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: rgba(136, 136, 136, 1);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: rgba(84, 173, 255, 1);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    /* margin-top: 80px; */\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* width: 24px;\n  height: 24px; */\n  right: 12px;\n  top: 12px;\n  color: rgba(84, 173, 255, 1);\n  cursor: pointer;\n  transition: 250ms;\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ valid }) => (valid ? 'rgba(42, 187, 155, 1)' : 'rgba(255, 99, 71, 1)')};\n  cursor: pointer;\n  transition: 250ms;\n\n`;\n\n\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: rgba(136, 136, 136, 1);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid ${({ error }) => (error ? 'rgba(255, 99, 71, 1)' : 'rgba(84, 173, 255, 1)')};   \n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n\n  \n`;\n\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: rgba(84, 173, 255, 1);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\n\nexport const Error = styled(ErrorMessage)`\ncolor: red;\nfont-size: 12px;\nfont-weight: 400;\nmargin-top: 4px;\nmargin-left: 16px;\n\n`\n","import React from 'react';\nimport { useFormikContext } from 'formik';\n// import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  Btn,\n  Error,\n} from './AuthForm.styled';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nconst AuthForm = ({ values, errors, touched }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const formik = useFormikContext();\n  // const navigate = useNavigate();\n  // const dispatch = useDispatch();\n\n  const validateIcon = (touched, errors, values, fieldName) => {\n    const isValid = touched[fieldName] && !errors[fieldName];\n\n    if (touched[fieldName] && errors[fieldName]) {\n      return (\n        <IconValid valid={false}>\n          <RxCross2 />\n        </IconValid>\n      );\n    } else if (isValid) {\n      return (\n        <IconValid valid>\n          <MdOutlineDone />\n        </IconValid>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Registration</h1>\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              error={formik.touched.email && formik.errors.email} // Передаємо error для показу помилки\n            />\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'email'\n            )}\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              error={formik.touched.password && formik.errors.password}\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{ width: '24px', height: '24px' }}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            <Error name=\"password\" component=\"div\" />\n          </InputContainer>\n          <InputContainer>\n            <InputLine\n              id=\"confirmPassword\"\n              placeholder=\"Confirm password\"\n              variant=\"outlined\"\n              name=\"confirmPassword\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{ width: '24px', height: '24px' }}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            <Error name=\"confirmPassword\" component=\"div\" />\n          </InputContainer>\n\n          <Btn type=\"submit\" color=\"primary\">\n            Registration\n          </Btn>\n        </StyledForm>\n        <p>\n          Already have an account? <a href=\"/YourPet/login\">Login</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import * as Yup from 'yup';\n\nconst validationRegistrationSchema = Yup.object({\n    email: Yup.string().email('Enter a valid Email').required('Please, enter your email'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .required('Required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\n      .required('Required'),\n});\n  \nexport default validationRegistrationSchema;","import AuthForm from 'components/AuthForm/AuthForm';\nimport { Formik } from 'formik';\nimport { register, logIn } from 'redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router';\nimport validationRegistrationSchema from 'utils/schemas/registrationSchema';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { email, password } = values;\n      await dispatch(register({ email, password }));\n      await dispatch(logIn({ email, password }));\n      // navigate('/user');\n      resetForm();\n    } catch (error) {\n      console.error('Registration or login failed:', error);\n    }\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={validationRegistrationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleSubmit }) => (\n        <AuthForm\n          values={values}\n          errors={errors}\n          touched={touched}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default Register;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","IconValid","_templateObject4","_ref","valid","InputLine","Field","_templateObject5","_ref2","error","StyledForm","Form","_templateObject6","Btn","_templateObject7","Error","ErrorMessage","_templateObject8","values","errors","touched","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","formik","useFormikContext","togglePasswordVisibility","prevShowPassword","_jsx","_Fragment","children","_jsxs","id","placeholder","variant","name","type","autoComplete","required","email","fieldName","isValid","RxCross2","MdOutlineDone","validateIcon","component","password","onClick","style","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","confirmPassword","color","href","Yup","min","oneOf","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","register","logIn","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationRegistrationSchema","onSubmit","_ref3","AuthForm"],"sourceRoot":""}