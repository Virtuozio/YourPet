{"version":3,"file":"static/js/189.d346f64f.chunk.js","mappings":"sQAGaA,EAAMC,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+uCAmEhBC,EAAiBH,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iXAuB3BG,EAAOL,EAAAA,EAAAA,KAAWM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0OAOpB,SAAAK,GAAgB,OAAAA,EAAbC,cACM,0BAA4B,qBAAqB,IAGtD,SAAAC,GAAgB,OAAAA,EAAbD,cACE,oBAAsB,MAAM,IAInCE,EAAYV,EAAAA,EAAAA,KAAWW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,qMAOzB,SAAAU,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAAK,OACtBD,EACI,qBACAC,EACA,uBACA,qBAAqB,IAEhB,SAAAC,GAAgB,OAAAA,EAAbP,cAAqC,EAAI,CAAC,IAG7CQ,GAAYhB,EAAAA,EAAAA,GAAOiB,EAAAA,GAAPjB,CAAakB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,8QAQhC,SAAAiB,GAAA,IAAGN,EAAKM,EAALN,MAAOO,EAAKD,EAALC,MAAK,OACfP,EACI,qBACAO,EACA,uBACA,qBAAqB,IASlBC,GAAarB,EAAAA,EAAAA,GAAOsB,EAAAA,GAAPtB,CAAYuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,2HAQzBsB,EAAMxB,EAAAA,EAAAA,OAAayB,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,49BAmDnBwB,GAAQ1B,EAAAA,EAAAA,GAAO2B,EAAAA,GAAP3B,CAAoB4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,4GAQ5B2B,EAAW7B,EAAAA,EAAAA,KAAW8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,uNAMxB,SAAA6B,GAAY,OAAAA,EAATC,UACE,0BAA4B,qBAAqB,IAClD,SAAAC,GAAY,OAAAA,EAATD,UAA6B,oBAAsB,MAAM,IAI9DE,EAAYlC,EAAAA,EAAAA,KAAWmC,IAAAA,GAAAjC,EAAAA,EAAAA,GAAA,iNAMzB,SAAAkC,GAAa,OAAAA,EAAVC,WACG,0BAA4B,qBAAqB,IACnD,SAAAC,GAAa,OAAAA,EAAVD,WAA+B,oBAAsB,MAAM,I,SCf7E,EApMiB,SAAH9B,GAAYA,EAANgC,OAAchC,EAANiC,OAAejC,EAAPkC,QAAe,IACjDC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAsDL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA9DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAClDG,GAAwBT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0Bb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCjB,EAAAA,EAAAA,UAAS,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA8CrB,EAAAA,EAAAA,UAAS,IAAGsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCG,GAASC,EAAAA,EAAAA,MAkCf,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAC1E,EAAG,CAAAyE,SAAA,EACFF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJC,EAAAA,EAAAA,MAACpD,EAAU,CAAAmD,SAAA,EACTC,EAAAA,EAAAA,MAACtE,EAAc,CAAAqE,SAAA,EACbF,EAAAA,EAAAA,KAACtD,EAAS,CACR0D,GAAG,OACHC,YAAY,OACZC,QAAQ,WACRtB,KAAK,OACLuB,KAAK,OACLC,aAAa,MACbC,UAAQ,EACRC,SAtCS,SAAAC,GACnB,IAAMjD,EAAYiD,EAAEC,OAAO9D,MAC3BmC,EAAQvB,GACRoC,EAAOe,cAAc,OAAQnD,EAC/B,EAmCYZ,MAAOkC,EACPzC,MAAOuD,EAAO3B,QAAQa,MAAQc,EAAO5B,OAAOc,QAE9CgB,EAAAA,EAAAA,KAACzC,EAAQ,CAACG,UAAWsB,EAAK8B,OAAOZ,SAC9BJ,EAAO3B,QAAQa,MAAQc,EAAO5B,OAAOc,MACpCgB,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAO,EAAON,cAAe8C,EAAK8B,OAAOZ,UAClDF,EAAAA,EAAAA,KAACe,EAAAA,IAAQ,CAACC,MAAO,CAAEC,MAAO,6BAG5BjB,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAK,EAACN,cAAe8C,EAAK8B,OAAOZ,UAC1CF,EAAAA,EAAAA,KAACkB,EAAAA,IAAa,SAIpBlB,EAAAA,EAAAA,KAAC5C,EAAK,CAAC4B,KAAK,OAAOmC,UAAU,aAG/BhB,EAAAA,EAAAA,MAACtE,EAAc,CAAAqE,SAAA,EACbF,EAAAA,EAAAA,KAACtD,EAAS,CACR0D,GAAG,QACHC,YAAY,QACZC,QAAQ,WACRtB,KAAK,QACLuB,KAAK,QACLC,aAAa,MACbC,UAAQ,EACRC,SA3DU,SAAAC,GACpB,IAAM5C,EAAa4C,EAAEC,OAAO9D,MAC5BuC,EAAStB,GACT+B,EAAOe,cAAc,QAAS9C,EAChC,EAwDYjB,MAAOsC,EACP7C,MAAOuD,EAAO3B,QAAQiB,OAASU,EAAO5B,OAAOkB,SAE/CY,EAAAA,EAAAA,KAACpC,EAAS,CAACG,WAAYqB,EAAM0B,OAAOZ,SACjCJ,EAAO3B,QAAQiB,OAASU,EAAO5B,OAAOkB,OACrCY,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAO,EAAON,cAAekD,EAAM0B,OAAOZ,UACnDF,EAAAA,EAAAA,KAACe,EAAAA,IAAQ,CAACC,MAAO,CAAEC,MAAO,6BAG5BjB,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAK,EAACN,cAAekD,EAAM0B,OAAOZ,UAC3CF,EAAAA,EAAAA,KAACkB,EAAAA,IAAa,SAIpBlB,EAAAA,EAAAA,KAAC5C,EAAK,CAAC4B,KAAK,QAAQmC,UAAU,aAGhChB,EAAAA,EAAAA,MAACtE,EAAc,CAAAqE,SAAA,EACbF,EAAAA,EAAAA,KAACtD,EAAS,CACR0D,GAAG,WACHC,YAAY,WACZC,QAAQ,WACRtB,KAAK,WACLwB,aAAa,MACbD,KAAM/B,EAAe,OAAS,WAC9BiC,UAAQ,EACRC,SAhFa,SAAAC,GACvB,IAAMzE,EAAgByE,EAAEC,OAAO9D,MAC/B2C,EAAYvD,GACZ4D,EAAOe,cAAc,WAAY3E,EACnC,EA6EYY,MAAO0C,EACPjD,MAAOuD,EAAO3B,QAAQqB,UAAYM,EAAO5B,OAAOsB,YAElDQ,EAAAA,EAAAA,KAACjE,EAAI,CACHqF,QAzGqB,WAC/B3C,GAAgB,SAAA4C,GAAgB,OAAKA,CAAgB,GACvD,EAwGYL,MAAO,CACLM,MAAO,OACPC,OAAQ,QAEVrF,cAAesD,EACfjD,MAAOuD,EAAO3B,QAAQqB,UAAYM,EAAO5B,OAAOsB,SAASU,SAExD1B,GACCwB,EAAAA,EAAAA,KAACwB,EAAAA,IAAmB,KAEpBxB,EAAAA,EAAAA,KAACyB,EAAAA,IAAsB,MAG1B3B,EAAO3B,QAAQqB,UAAYM,EAAO5B,OAAOsB,UACxCQ,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAO,EAAON,cAAesD,EAASsB,OAAOZ,UACtDF,EAAAA,EAAAA,KAACe,EAAAA,IAAQ,CAACC,MAAO,CAAEC,MAAO,6BAG5BjB,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAK,EAACN,cAAesD,EAASsB,OAAOZ,UAC9CF,EAAAA,EAAAA,KAACkB,EAAAA,IAAa,OAGlBlB,EAAAA,EAAAA,KAAC5C,EAAK,CAAC4B,KAAK,WAAWmC,UAAU,aAGnChB,EAAAA,EAAAA,MAACtE,EAAc,CAAAqE,SAAA,EACbF,EAAAA,EAAAA,KAACtD,EAAS,CACR0D,GAAG,kBACHC,YAAY,mBACZC,QAAQ,WACRtB,KAAK,kBACLwB,aAAa,MACbD,KAAM3B,EAAsB,OAAS,WACrC6B,UAAQ,EACRC,SAlHoB,SAAAC,GAC9B,IAAMe,EAAuBf,EAAEC,OAAO9D,MACtC+C,EAAmB6B,GACnB5B,EAAOe,cAAc,kBAAmBa,EAC1C,EA+GY5E,MAAO8C,EACPrD,MACEuD,EAAO3B,QAAQyB,iBAAmBE,EAAO5B,OAAO0B,mBAGpDI,EAAAA,EAAAA,KAACjE,EAAI,CACHqF,QA/I4B,WACtCvC,GAAuB,SAAA8C,GAAuB,OAAKA,CAAuB,GAC5E,EA8IYX,MAAO,CACLM,MAAO,OACPC,OAAQ,QAEVrF,cAAe0D,EACfrD,MACEuD,EAAO3B,QAAQyB,iBAAmBE,EAAO5B,OAAO0B,gBACjDM,SAEAtB,GACCoB,EAAAA,EAAAA,KAACwB,EAAAA,IAAmB,KAEpBxB,EAAAA,EAAAA,KAACyB,EAAAA,IAAsB,MAG1B3B,EAAO3B,QAAQyB,iBAAmBE,EAAO5B,OAAO0B,iBAC/CI,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAO,EAAON,cAAe0D,EAAgBkB,OAAOZ,UAC7DF,EAAAA,EAAAA,KAACe,EAAAA,IAAQ,CAACC,MAAO,CAAEC,MAAO,6BAG5BjB,EAAAA,EAAAA,KAAC5D,EAAS,CAACI,OAAK,EAACN,cAAe0D,EAAgBkB,OAAOZ,UACrDF,EAAAA,EAAAA,KAACkB,EAAAA,IAAa,OAGlBlB,EAAAA,EAAAA,KAAC5C,EAAK,CAAC4B,KAAK,kBAAkBmC,UAAU,aAG1CnB,EAAAA,EAAAA,KAAC9C,EAAG,CAACqD,KAAK,SAASU,MAAM,UAASf,SAAC,qBAIrCC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,6BACwBF,EAAAA,EAAAA,KAAA,KAAG4B,KAAK,iBAAgB1B,SAAC,iBAK5D,E,8BCtMA,EAlBqC2B,EAAAA,GAAW,CAC9C7C,KAAM6C,EAAAA,KACDC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QAAQ,2HAAgE,CACvEC,QACE,4IAEHxB,SAAS,YACZrB,MAAOyC,EAAAA,KAAazC,MAAM,uBAAuBqB,SAAS,4BAC1DjB,SAAUqC,EAAAA,KACPC,IAAI,EAAG,0CACPrB,SAAS,YACZb,gBAAiBiC,EAAAA,KACdK,MAAM,CAACL,EAAAA,GAAQ,YAAa,MAAO,wBACnCpB,SAAS,cC2BhB,EArCiB,WACf,IAAM0B,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,eAAAlG,GAAAmG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOxE,EAAMhC,GAAA,IAAAyG,EAAAC,EAAA3D,EAAAI,EAAAI,EAAA,OAAA+C,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAED,OAFKL,EAAazG,EAAbyG,cAAeC,EAAS1G,EAAT0G,UAASE,EAAAC,KAAA,EAElD9D,EAA0Bf,EAA1Be,KAAMI,EAAoBnB,EAApBmB,MAAOI,EAAavB,EAAbuB,SAAQqD,EAAAE,KAAA,EACvBZ,GAASa,EAAAA,EAAAA,IAAS,CAAEhE,KAAAA,EAAMI,MAAAA,EAAOI,SAAAA,KAAa,KAAD,EAEnDmD,IAAYE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAEZK,QAAQ3G,MAAM,uBAAsBsG,EAAAI,IAAS,QAE/CP,GAAc,GAAO,yBAAAG,EAAAM,OAAA,GAAAV,EAAA,kBACtB,gBAViBW,EAAAC,GAAA,OAAAlH,EAAAmH,MAAA,KAAAC,UAAA,KAWlB,OACEvD,EAAAA,EAAAA,KAACwD,EAAAA,GAAM,CACLC,cAAe,CACbzE,KAAM,GACNI,MAAO,GACPI,SAAU,GACVI,gBAAiB,IAEnB8D,iBAAkBC,EAClBC,SAAUvB,EAAanC,SAEtB,SAAA5D,GAAA,IAAG2B,EAAM3B,EAAN2B,OAAQC,EAAM5B,EAAN4B,OAAQC,EAAO7B,EAAP6B,QAASkE,EAAY/F,EAAZ+F,aAAY,OACvCrC,EAAAA,EAAAA,KAAC6D,EAAQ,CACP5F,OAAQA,EACRC,OAAQA,EACRC,QAASA,EACTyF,SAAUvB,GACV,GAIV,C","sources":["components/AuthForm/AuthForm.styled.js","components/AuthForm/AuthForm.jsx","utils/schemas/registrationSchema.js","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: var(--label-active-color);\n  border: 1px solid var(--btn-bg-color);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: var(--text-input-color);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: var(--btn-bg-color);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: var(--text-input-color);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: var(--btn-bg-color);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 12px;\n  top: 12px;\n  color: ${({ passwordValue }) =>\n    passwordValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ passwordValue }) =>\n    passwordValue ? 'translateX(-27px)' : 'none'};\n  transition: var(--duration) var(--cubic);\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ error, valid }) =>\n    error\n      ? 'var(--error-color)'\n      : valid\n      ? 'var(--success-color)'\n      : 'var(--btn-bg-color)'};\n  transition: var(--duration);\n  opacity: ${({ passwordValue }) => (passwordValue ? 1 : 0)};\n`;\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: var(--text-input-color);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid\n    ${({ error, value }) =>\n      error\n        ? 'var(--error-color)'\n        : value\n        ? 'var(--success-color)'\n        : 'var(--btn-bg-color)'};\n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: var(--btn-bg-color);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity var(--duration) var(--cubic);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n  font-weight: 400;\n  margin-top: 4px;\n  margin-left: 16px;\n`;\n\nexport const IconName = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: -23px;\n  color: ${({ nameValue }) =>\n    nameValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n  transform: ${({ nameValue }) => (nameValue ? 'translateX(-27px)' : 'none')};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const IconEmail = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: -23px;\n  color: ${({ emailValue }) =>\n    emailValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n  transform: ${({ emailValue }) => (emailValue ? 'translateX(-27px)' : 'none')};\n  transition: transform var(--duration) var(--cubic);\n`;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { useState } from 'react';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  IconName,\n  IconEmail,\n  Btn,\n  Error,\n} from './AuthForm.styled';\n\nconst AuthForm = ({ values, errors, touched }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const formik = useFormikContext();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(prevShowConfirmPassword => !prevShowConfirmPassword);\n  };\n\n  const onNameChange = e => {\n    const nameValue = e.target.value;\n    setName(nameValue);\n    formik.setFieldValue('name', nameValue);\n  };\n\n  const onEmailChange = e => {\n    const emailValue = e.target.value;\n    setEmail(emailValue);\n    formik.setFieldValue('email', emailValue);\n  };\n\n  const onPasswordChange = e => {\n    const passwordValue = e.target.value;\n    setPassword(passwordValue);\n    formik.setFieldValue('password', passwordValue);\n  };\n\n  const onConfirmPasswordChange = e => {\n    const confirmPasswordValue = e.target.value;\n    setConfirmPassword(confirmPasswordValue);\n    formik.setFieldValue('confirmPassword', confirmPasswordValue);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Registration</h1>\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"name\"\n              placeholder=\"Name\"\n              variant=\"outlined\"\n              name=\"name\"\n              type=\"name\"\n              autoComplete=\"off\"\n              required\n              onChange={onNameChange}\n              value={name}\n              error={formik.touched.name && formik.errors.name}\n            />\n            <IconName nameValue={name.length}>\n              {formik.touched.name && formik.errors.name ? (\n                <IconValid valid={false} passwordValue={name.length}>\n                  <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n                </IconValid>\n              ) : (\n                <IconValid valid passwordValue={name.length}>\n                  <MdOutlineDone />\n                </IconValid>\n              )}\n            </IconName>\n            <Error name=\"name\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              onChange={onEmailChange}\n              value={email}\n              error={formik.touched.email && formik.errors.email}\n            />\n            <IconEmail emailValue={email.length}>\n              {formik.touched.email && formik.errors.email ? (\n                <IconValid valid={false} passwordValue={email.length}>\n                  <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n                </IconValid>\n              ) : (\n                <IconValid valid passwordValue={email.length}>\n                  <MdOutlineDone />\n                </IconValid>\n              )}\n            </IconEmail>\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              onChange={onPasswordChange}\n              value={password}\n              error={formik.touched.password && formik.errors.password}\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{\n                width: '24px',\n                height: '24px',\n              }}\n              passwordValue={password}\n              error={formik.touched.password && formik.errors.password}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            {formik.touched.password && formik.errors.password ? (\n              <IconValid valid={false} passwordValue={password.length}>\n                <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n              </IconValid>\n            ) : (\n              <IconValid valid passwordValue={password.length}>\n                <MdOutlineDone />\n              </IconValid>\n            )}\n            <Error name=\"password\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"confirmPassword\"\n              placeholder=\"Confirm password\"\n              variant=\"outlined\"\n              name=\"confirmPassword\"\n              autoComplete=\"off\"\n              type={showConfirmPassword ? 'text' : 'password'}\n              required\n              onChange={onConfirmPasswordChange}\n              value={confirmPassword}\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n            />\n            <Icon\n              onClick={toggleConfirmPasswordVisibility}\n              style={{\n                width: '24px',\n                height: '24px',\n              }}\n              passwordValue={confirmPassword}\n              error={\n                formik.touched.confirmPassword && formik.errors.confirmPassword\n              }\n            >\n              {showConfirmPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n              <IconValid valid={false} passwordValue={confirmPassword.length}>\n                <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n              </IconValid>\n            ) : (\n              <IconValid valid passwordValue={confirmPassword.length}>\n                <MdOutlineDone />\n              </IconValid>\n            )}\n            <Error name=\"confirmPassword\" component=\"span\" />\n          </InputContainer>\n\n          <Btn type=\"submit\" color=\"primary\">\n            Registration\n          </Btn>\n        </StyledForm>\n        <p>\n          Already have an account? <a href=\"/YourPet/login\">Login</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import * as Yup from 'yup';\n\nconst validationRegistrationSchema = Yup.object({\n  name: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n        message:\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\",\n      })\n      .required('Required'),\n    email: Yup.string().email('Enter a valid Email').required('Please, enter your email'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .required('Required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\n      .required('Required'),\n});\n  \nexport default validationRegistrationSchema;","import AuthForm from 'components/AuthForm/AuthForm';\nimport { Formik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router';\nimport validationRegistrationSchema from 'utils/schemas/registrationSchema';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { name, email, password } = values;\n      await dispatch(register({ name, email, password }));\n      // navigate('/user');\n      resetForm();\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={validationRegistrationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleSubmit }) => (\n        <AuthForm\n          values={values}\n          errors={errors}\n          touched={touched}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default Register;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","_ref","passwordValue","_ref2","IconValid","_templateObject4","_ref3","error","valid","_ref4","InputLine","Field","_templateObject5","_ref5","value","StyledForm","Form","_templateObject6","Btn","_templateObject7","Error","ErrorMessage","_templateObject8","IconName","_templateObject9","_ref6","nameValue","_ref7","IconEmail","_templateObject10","_ref8","emailValue","_ref9","values","errors","touched","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showConfirmPassword","setShowConfirmPassword","_useState5","_useState6","name","setName","_useState7","_useState8","email","setEmail","_useState9","_useState10","password","setPassword","_useState11","_useState12","confirmPassword","setConfirmPassword","formik","useFormikContext","_jsx","_Fragment","children","_jsxs","id","placeholder","variant","type","autoComplete","required","onChange","e","target","setFieldValue","length","RxCross2","style","color","MdOutlineDone","component","onClick","prevShowPassword","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","confirmPasswordValue","prevShowConfirmPassword","href","Yup","min","max","matches","message","oneOf","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","register","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationRegistrationSchema","onSubmit","AuthForm"],"sourceRoot":""}