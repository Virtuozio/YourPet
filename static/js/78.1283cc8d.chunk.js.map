{"version":3,"file":"static/js/78.1283cc8d.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","utils/schemas/logInSchema.js","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: white;\n  border: 1px solid rgba(84, 173, 255, 1);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: rgba(136, 136, 136, 1);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: rgba(84, 173, 255, 1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: rgba(136, 136, 136, 1);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: rgba(84, 173, 255, 1);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* width: 24px;\n  height: 24px; */\n  right: 12px;\n  top: 12px;\n  color: ${({ passwordValue }) =>\n    passwordValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ passwordValue }) =>\n    passwordValue ? 'translateX(-27px)' : 'none'};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ error, valid }) =>\n      error\n        ? 'var(--error-color)'\n        : valid\n        ? 'var(--success-color)'\n        : 'var(--btn-bg-color)'};\n  cursor: pointer;\n  transition: 250ms;\n  opacity: ${({ passwordValue }) => (passwordValue ? 1 : 0)};\n`;\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: rgba(136, 136, 136, 1);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid ${({ error, valid }) =>\n      error\n        ? 'var(--error-color)'\n        : valid\n        ? 'var(--success-color)'\n        : 'var(--btn-bg-color)'};\n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: rgba(84, 173, 255, 1);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\ncolor: red;\nfont-size: 12px;\nfont-weight: 400;\nmargin-top: 4px;\nmargin-left: 16px;\n\n`\n\n\n\nexport const IconEmail = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: -23px;\n\n  /* top: 12px; */\n  color: ${({ emailValue }) =>\n    emailValue ? 'var(--text-input-color)' : 'var(--btn-bg-color)'};\n\n  cursor: pointer;\n  transform: ${({ emailValue }) =>\n    emailValue ? 'translateX(-27px)' : 'none'};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;","import React from 'react';\nimport { useState } from 'react';\nimport { useFormikContext } from 'formik';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  IconEmail,\n  Btn,\n  Error,\n} from './LoginForm.styled';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nconst LoginForm = ({ values, errors, touched }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const formik = useFormikContext();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const validPassword = formik.touched.password && !formik.errors.password;\n\n  const validateIcon = (touched, errors, values, fieldName) => {\n    const valid = touched[fieldName] && !errors[fieldName];\n\n    if (touched[fieldName] && errors[fieldName]) {\n      return (\n        <IconValid valid={false} passwordValue={password.length}>\n          <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n        </IconValid>\n      );\n    } else if (valid) {\n      return (\n        <IconValid valid passwordValue={password.length}>\n          <MdOutlineDone />\n        </IconValid>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  const onEmailChange = e => {\n    const emailValue = e.target.value;\n    setEmail(emailValue);\n    formik.setFieldValue('email', emailValue);\n  };\n\n  const onPasswordChange = e => {\n    const passwordValue = e.target.value;\n    setPassword(passwordValue);\n    formik.setFieldValue('password', passwordValue);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Login</h1>\n\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              onChange={onEmailChange}\n              value={email}\n              error={formik.touched.email && formik.errors.email}\n              valid={formik.touched.email && !formik.errors.email}\n            />\n            <IconEmail emailValue={email.length}>\n              {formik.touched.email && formik.errors.email ? (\n                <IconValid valid={false} passwordValue={email.length}>\n                  <RxCross2 style={{ color: 'rgba(255, 99, 71, 1)' }} />\n                </IconValid>\n              ) : (\n                <IconValid valid passwordValue={email.length}>\n                  <MdOutlineDone />\n                </IconValid>\n              )}\n            </IconEmail>\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n              onChange={onPasswordChange}\n              value={password}\n              error={formik.touched.password && formik.errors.password}\n              valid={validPassword}\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{\n                width: '24px',\n                height: '24px',\n              }}\n              passwordValue={password}\n              error={formik.touched.password && formik.errors.password}\n              valid={validPassword}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'password'\n            )}\n            <Error name=\"password\" component=\"span\" />\n          </InputContainer>\n          <Btn type=\"submit\">Login</Btn>\n        </StyledForm>\n        <p>\n          Don't have an account? <a href=\"/YourPet/register\">Register</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import * as Yup from 'yup';\n\n\n\nconst validationLogInSchema = Yup.object({\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string().min(8, 'Password must be at least 8 characters').required('Required'),\n});\n  \n\nexport default validationLogInSchema;","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { useNavigate } from 'react-router';\nimport validationLogInSchema from 'utils/schemas/logInSchema';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { email, password } = values;\n      await dispatch(logIn({ email, password }));\n      resetForm();\n      navigate('/user');\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n    setSubmitting(false);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={validationLogInSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, errors, touched, handleSubmit }) => (\n          <LoginForm\n            values={values}\n            errors={errors}\n            touched={touched}\n            onSubmit={handleSubmit}\n          />\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","_ref","passwordValue","_ref2","IconValid","_templateObject4","_ref3","error","valid","_ref4","InputLine","Field","_templateObject5","_ref5","StyledForm","Form","_templateObject6","Btn","_templateObject7","Error","ErrorMessage","_templateObject8","IconEmail","_templateObject9","_ref6","emailValue","_ref7","values","errors","touched","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","formik","useFormikContext","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","validPassword","_jsx","_Fragment","children","_jsxs","id","placeholder","variant","name","type","autoComplete","required","onChange","e","target","value","setFieldValue","length","RxCross2","style","color","MdOutlineDone","component","onClick","prevShowPassword","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","fieldName","validateIcon","href","Yup","min","navigate","useNavigate","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","logIn","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationLogInSchema","onSubmit","LoginForm"],"sourceRoot":""}