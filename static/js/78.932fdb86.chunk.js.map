{"version":3,"file":"static/js/78.932fdb86.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","utils/schemas/logInSchema.js","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  margin-top: 44px;\n  background-color: white;\n  border: 1px solid rgba(84, 173, 255, 1);\n  box-shadow: rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  margin-bottom: 100px;\n  box-sizing: border-box;\n\n  width: 280px;\n  padding: 40px 12px;\n\n  h1 {\n    font-family: Manrope;\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    margin: 0;\n    margin-bottom: 40px;\n  }\n  p {\n    font-family: Manrope;\n    font-weight: 400;\n    font-size: 12px;\n    color: rgba(136, 136, 136, 1);\n    text-align: center;\n  }\n\n  a {\n    font-size: 12px;\n    color: rgba(84, 173, 255, 1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n    margin-top: 80px;\n\n\n    h1 {\n      font-family: Manrope;\n      font-size: 36px;\n      font-weight: 500;\n      text-align: center;\n      margin: 0;\n      margin-bottom: 40px;\n    }\n\n    p {\n      font-family: Manrope;\n      font-weight: 400;\n      font-size: 12px;\n      color: rgba(136, 136, 136, 1);\n      text-align: center;\n    }\n\n    a {\n      font-size: 12px;\n      color: rgba(84, 173, 255, 1);\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 608px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n\n  :not(:last-child) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n\n  @media screen and (min-width: 1280px) {\n    :not(:last-child) {\n      margin-bottom: 32px;\n    }\n  }\n`;\n\nexport const Icon = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* width: 24px;\n  height: 24px; */\n  right: 12px;\n  top: 12px;\n  color: rgba(84, 173, 255, 1);\n  cursor: pointer;\n  transition: 250ms;\n`;\n\nexport const IconValid = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 17px;\n  top: 15px;\n  color: ${({ valid }) => (valid ? 'rgba(42, 187, 155, 1)' : 'rgba(255, 99, 71, 1)')};\n  cursor: pointer;\n  transition: 250ms;\n\n`;\n\nexport const InputLine = styled(Field)`\n  font-family: Manrope;\n  position: relative;\n  color: rgba(136, 136, 136, 1);\n  font-size: 16px;\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid ${({ error }) => (error ? 'rgba(255, 99, 71, 1)' : 'rgba(84, 173, 255, 1)')};   \n  border-radius: 40px;\n  box-sizing: border-box;\n\n  :focus {\n    outline: 0;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Btn = styled.button`\n  width: 100%;\n  height: auto;\n  padding: 10px 28px;\n\n  border: none;\n  border-radius: 40px;\n  font-size: 20px;\n  color: #fff;\n  cursor: pointer;\n  background: rgba(84, 173, 255, 1);\n  translate: 0 0;\n\n  ::before {\n    box-sizing: border-box;\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n    border-radius: 40px;\n    opacity: 0;\n    z-index: -1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover {\n    background: linear-gradient(\n      245deg,\n      rgba(65, 158, 241, 1) 30%,\n      rgba(155, 208, 255, 1)\n    );\n    background-position: 100% 50%;\n  }\n\n  margin-top: 56px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 28px;\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\ncolor: red;\nfont-size: 12px;\nfont-weight: 400;\nmargin-top: 4px;\nmargin-left: 16px;\n\n`","import React from 'react';\nimport { useState } from 'react';\nimport { useFormikContext } from 'formik';\n\n// import { useDispatch } from 'react-redux';\n// import { logIn } from 'redux/auth/authOperations';\n// import { useNavigate } from 'react-router';\n\nimport {\n  Div,\n  StyledForm,\n  InputLine,\n  InputContainer,\n  Icon,\n  IconValid,\n  Btn,\n  Error,\n} from './LoginForm.styled';\n\nimport {\n  MdOutlineVisibilityOff,\n  MdOutlineVisibility,\n  MdOutlineDone,\n} from 'react-icons/md';\nimport { RxCross2 } from 'react-icons/rx';\n\nconst LoginForm = ({ values, errors, touched }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  // const navigate = useNavigate();\n  // const dispatch = useDispatch();\n  const formik = useFormikContext();\n\n  // const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n  //   try {\n  //     const { email, password } = values;\n  //     await dispatch(logIn({ email, password }));\n  //     resetForm();\n  //     navigate('/user');\n  //   } catch (error) {\n  //     console.error('Login failed:', error);\n  //   }\n  //   setSubmitting(false);\n  // };\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   dispatch(\n  //     logIn({\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   form.reset();\n  //   navigate('/user');\n  // };\n\n  const validateIcon = (touched, errors, values, fieldName) => {\n    const isValid = touched[fieldName] && !errors[fieldName];\n\n    if (touched[fieldName] && errors[fieldName]) {\n      return (\n        <IconValid valid={false}>\n          <RxCross2 />\n        </IconValid>\n      );\n    } else if (isValid) {\n      return (\n        <IconValid valid>\n          <MdOutlineDone />\n        </IconValid>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <>\n      <Div>\n        <h1>Login</h1>\n\n        <StyledForm>\n          <InputContainer>\n            <InputLine\n              id=\"email\"\n              placeholder=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"off\"\n              required\n              error={formik.touched.email && formik.errors.email}\n            />\n            {validateIcon(\n              formik.touched,\n              formik.errors,\n              formik.values,\n              'email'\n            )}\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n          <InputContainer>\n            <InputLine\n              id=\"password\"\n              placeholder=\"Password\"\n              variant=\"outlined\"\n              name=\"password\"\n              autoComplete=\"off\"\n              type={showPassword ? 'text' : 'password'}\n              required\n            />\n            <Icon\n              onClick={togglePasswordVisibility}\n              style={{ width: '24px', height: '24px' }}\n            >\n              {showPassword ? (\n                <MdOutlineVisibility />\n              ) : (\n                <MdOutlineVisibilityOff />\n              )}\n            </Icon>\n            <Error name=\"email\" component=\"span\" />\n          </InputContainer>\n          <Btn type=\"submit\">Login</Btn>\n        </StyledForm>\n        <p>\n          Don't have an account? <a href=\"/YourPet/register\">Register</a>\n        </p>\n      </Div>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import * as Yup from 'yup';\n\n\n\nconst validationLogInSchema = Yup.object({\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string().required('Required'),\n});\n  \n\nexport default validationLogInSchema;","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { useNavigate } from 'react-router';\nimport validationLogInSchema from 'utils/schemas/logInSchema';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { email, password } = values;\n      await dispatch(logIn({ email, password }));\n      resetForm();\n      navigate('/user');\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n    setSubmitting(false);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={validationLogInSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, errors, touched, handleSubmit }) => (\n          <LoginForm\n            values={values}\n            errors={errors}\n            touched={touched}\n            onSubmit={handleSubmit}\n          />\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","Icon","_templateObject3","IconValid","_templateObject4","_ref","valid","InputLine","Field","_templateObject5","_ref2","error","StyledForm","Form","_templateObject6","Btn","_templateObject7","Error","ErrorMessage","_templateObject8","values","errors","touched","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","formik","useFormikContext","_jsx","_Fragment","children","_jsxs","id","placeholder","variant","name","type","autoComplete","required","email","fieldName","isValid","RxCross2","MdOutlineDone","validateIcon","component","onClick","prevShowPassword","style","width","height","MdOutlineVisibility","MdOutlineVisibilityOff","href","Yup","password","navigate","useNavigate","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","resetForm","wrap","_context","prev","next","logIn","t0","console","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","validationLogInSchema","onSubmit","_ref3","LoginForm"],"sourceRoot":""}